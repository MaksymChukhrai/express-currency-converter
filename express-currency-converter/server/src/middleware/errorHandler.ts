import { Request, Response, NextFunction } from 'express';

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
export const errorHandler = (
  error: Error,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);

  // –Ø–∫—â–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ, –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ
  if (res.headersSent) {
    return next(error);
  }

  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ø–æ–º–∏–ª–∫—É
  res.status(500).json({
    success: false,
    error: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: process.env.NODE_ENV === 'development' ? error.message : '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫',
    timestamp: new Date().toISOString()
  });
};

// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–µ—ñ—Å–Ω—É—é—á–∏—Ö –º–∞—Ä—à—Ä—É—Ç—ñ–≤
export const notFound = (req: Request, res: Response) => {
  res.status(404).json({
    success: false,
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
    message: `–ú–∞—Ä—à—Ä—É—Ç ${req.method} ${req.path} –Ω–µ —ñ—Å–Ω—É—î`,
    timestamp: new Date().toISOString()
  });
};