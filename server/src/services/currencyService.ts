import { NbuApiService } from './nbuApiService.js';
import { cache, CACHE_KEYS } from '../config/cache.js';
import { UAH_CODE } from '../config/constants.js';
import { 
  Currency, 
  NBUCurrencyRate, 
  ConversionRequest, 
  ConversionResult,
  RatesResponse 
} from '../types/currency.types.js';

export class CurrencyService {
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –ù–ë–£ –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
  private static convertNbuToOurFormat(nbuRates: NBUCurrencyRate[]): Currency[] {
    const currencies: Currency[] = nbuRates.map(rate => ({
      code: rate.cc,
      name: rate.txt,
      rate: rate.rate,
      date: rate.exchangedate
    }));

    // –î–æ–¥–∞—î–º–æ –≥—Ä–∏–≤–Ω—é —è–∫ –±–∞–∑–æ–≤—É –≤–∞–ª—é—Ç—É
    currencies.push({
      code: UAH_CODE,
      name: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –≥—Ä–∏–≤–Ω—è',
      rate: 1,
      date: nbuRates[0]?.exchangedate || new Date().toLocaleDateString('uk-UA')
    });

    return currencies;
  }

  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫—É—Ä—Å–∏ (–∑ –∫–µ—à–µ–º)
  static async getAllRates(): Promise<RatesResponse> {
    try {
      // –°–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –∑ –∫–µ—à—É
      const cachedRates = cache.get<Currency[]>(CACHE_KEYS.ALL_RATES);
      const lastUpdate = cache.get<string>(CACHE_KEYS.LAST_UPDATE);

      if (cachedRates && lastUpdate) {
        console.log('üì¶ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—É—Ä—Å–∏ –∑ –∫–µ—à—É');
        return {
          rates: cachedRates,
          lastUpdated: lastUpdate,
          source: 'cache'
        };
      }

      // –Ø–∫—â–æ –∫–µ—à –ø–æ—Ä–æ–∂–Ω—ñ–π - –∑–∞–ø–∏—Ç—É—î–º–æ –∑ API
      console.log('üåê –û—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—ñ –∫—É—Ä—Å–∏ –∑ API –ù–ë–£');
      const nbuRates = await NbuApiService.fetchExchangeRates();
      const currencies = this.convertNbuToOurFormat(nbuRates);
      const currentTime = new Date().toISOString();

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      cache.set(CACHE_KEYS.ALL_RATES, currencies);
      cache.set(CACHE_KEYS.LAST_UPDATE, currentTime);

      console.log('üíæ –ö—É—Ä—Å–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∫–µ—à');

      return {
        rates: currencies,
        lastUpdated: currentTime,
        source: 'api'
      };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤:', error);
      throw error;
    }
  }

  // –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤–∞–ª—é—Ç–Ω–æ—ó –ø–∞—Ä–∏
  static async getExchangeRate(from: string, to: string): Promise<number> {
    const rates = await this.getAllRates();
    
    const fromCurrency = rates.rates.find(r => r.code === from.toUpperCase());
    const toCurrency = rates.rates.find(r => r.code === to.toUpperCase());

    if (!fromCurrency) {
      throw new Error(`–í–∞–ª—é—Ç–∞ ${from} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
    }
    if (!toCurrency) {
      throw new Error(`–í–∞–ª—é—Ç–∞ ${to} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
    }

    // –Ø–∫—â–æ –æ–¥–Ω–∞ –∑ –≤–∞–ª—é—Ç - –≥—Ä–∏–≤–Ω—è
    if (from.toUpperCase() === UAH_CODE) {
      return 1 / toCurrency.rate;
    }
    if (to.toUpperCase() === UAH_CODE) {
      return fromCurrency.rate;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –≥—Ä–∏–≤–Ω—é: USD -> UAH -> EUR
    return fromCurrency.rate / toCurrency.rate;
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—É–º—É –∑ –æ–¥–Ω—ñ—î—ó –≤–∞–ª—é—Ç–∏ –≤ —ñ–Ω—à—É
  static async convertCurrency(request: ConversionRequest): Promise<ConversionResult> {
    try {
      const rate = await this.getExchangeRate(request.from, request.to);
      const result = request.amount * rate;
      
      const rates = await this.getAllRates();

      return {
        from: request.from.toUpperCase(),
        to: request.to.toUpperCase(),
        amount: request.amount,
        result: Math.round(result * 10000) / 10000, // –û–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ 4 –∑–Ω–∞–∫—ñ–≤
        rate: Math.round(rate * 10000) / 10000,
        date: rates.lastUpdated
      };
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:', error);
      throw error;
    }
  }

  // –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞–ª—é—Ç
  static async getAvailableCurrencies(): Promise<string[]> {
    const rates = await this.getAllRates();
    return rates.rates.map(r => r.code).sort();
  }
}